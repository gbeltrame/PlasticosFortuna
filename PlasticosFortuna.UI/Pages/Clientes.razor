@page "/clientes"

@using PlasticosFortuna.Shared;
@using System.Text.Json;
@using System.Text;
@inject IHttpClientFactory _clientFactory;
@inject IToastService toastService;


<h3>Clientes</h3>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
}
else if (clientes == null)
{
    <div class="spinner"></div>
}
else
{

    <BSButton Color="Color.Primary" @onclick="NuevoClienteForm">Nuevo Cliente  <i class="oi oi-person"></i></BSButton>
    <p />
    <BSModal @ref="ClienteModal">
        <BSForm Model="@clienteModel" OnValidSubmit="@SubmitCliente">
            <BSModalHeader OnClick="@(() => ClienteModal.Hide())">@modalTitle</BSModalHeader>
            <BSModalBody>
                <DataAnnotationsValidator />
                <BSRow>
                    <BSFormGroup Class="col-md-12">
                        <BSLabel For="nombre">Nombre</BSLabel>
                        <BSInput InputType="InputType.Text" Id="nombre" @bind-Value="@clienteModel.Nombre" />
                        <BSFormFeedback For="@(() => clienteModel.Nombre)" ValidMessage="" />
                    </BSFormGroup>

                    <BSFormGroup Class="col-md-12">
                        <BSLabel For="descripcion">Descripci&#243;n</BSLabel>
                        <BSInput Id="descripcion" InputType="InputType.TextArea" @bind-Value="@clienteModel.Descripcion" />
                        <BSFormFeedback For="@(() => clienteModel.Descripcion)" ValidMessage="" />
                    </BSFormGroup>

                    <BSFormGroup Class="col-md-12">
                        <BSLabel For="email">Direcci&#243;n de correo electronico</BSLabel>
                        <BSInput Id="email" InputType="InputType.Text" @bind-Value="@clienteModel.Email" />
                        <BSFormFeedback For="@(() => clienteModel.Email)" ValidMessage="" />
                    </BSFormGroup>
                </BSRow>
            </BSModalBody>
            <BSModalFooter>
                <BSButton Color="Color.Secondary" @onclick="@(() => ClienteModal.Hide())">Cancelar</BSButton>
                <BSButton ButtonType="ButtonType.Submit" Color="Color.Primary">@modalButtonText</BSButton>
            </BSModalFooter>
        </BSForm>
    </BSModal>
    <BSModal @ref="ConfirmacionEliminarClienteModal">
        <BSModalHeader OnClick="@(() => ConfirmacionEliminarClienteModal.Hide())">@modalTitle</BSModalHeader>
        <BSModalBody><p>Esta seguro que desea eliminar al cliente @clienteNameToDelete ?</p></BSModalBody>
        <BSModalFooter>
            <BSButton Color="Color.Secondary" @onclick="@(() => ConfirmacionEliminarClienteModal.Hide())">Cancelar</BSButton>
            <BSButton Color="Color.Primary" @onclick="@(() => RemoveCliente(clienteIdToDelete))">@modalButtonText</BSButton>
        </BSModalFooter>
    </BSModal>

    <p> Resultados @(pagingMetadata.PageSize * (PaginaActual - 1)) - @(pagingMetadata.PageSize * PaginaActual) de @(pagingMetadata.TotalCount)</p>
    <BSTable IsResponsive="true" IsStriped="true">
        <BSTableHead>
            <BSTableRow>
                <BSTableHeadCell Color="Color.Dark" scope="col">Acci&#243;n</BSTableHeadCell>
                <BSTableHeadCell Color="Color.Dark" scope="col"><a style="color:white" href="" @onclick="@(() => Sort("Id"))" @onclick:preventDefault>Nro. Cliente</a> <i style="visibility:@(OrderByField == "Id"? "visible" : "hidden")" class="oi oi-caret-@(OrderType == "asc"? "bottom":"top")" /></BSTableHeadCell>
                <BSTableHeadCell Color="Color.Dark" scope="col"><a style="color:white" href="" @onclick="@(() => Sort("Nombre"))" @onclick:preventDefault>Nombre</a> <i style="visibility:@(OrderByField == "Nombre"? "visible" : "hidden")" class="oi oi-caret-@(OrderType == "asc"? "bottom":"top")" /></BSTableHeadCell>
                <BSTableHeadCell Color="Color.Dark" scope="col"><a style="color:white" href="" @onclick="@(() => Sort("Descripcion"))" @onclick:preventDefault>Descripci&#243;n</a> <i style="visibility:@(OrderByField == "Descripcion"? "visible" : "hidden")" class="oi oi-caret-@(OrderType == "asc"? "bottom":"top")" /></BSTableHeadCell>
                <BSTableHeadCell Color="Color.Dark" scope="col"><a style="color:white" href="" @onclick="@(() => Sort("Email"))" @onclick:preventDefault>Email</a> <i style="visibility:@(OrderByField == "Email"? "visible" : "hidden")" class="oi oi-caret-@(OrderType == "asc"? "bottom":"top")" /></BSTableHeadCell>
            </BSTableRow>
            <BSTableRow>
                <BSTableHeadCell Color="Color.Dark" scope="col">Filtros</BSTableHeadCell>
                <BSTableHeadCell Color="Color.Dark" scope="col"><input type="email" class="form-control" id="exampleFormControlInput1" placeholder="Inserte Valor Filtro"></BSTableHeadCell>
                <BSTableHeadCell Color="Color.Dark" scope="col"><input type="email" class="form-control" id="exampleFormControlInput2" placeholder="Inserte Valor Filtro"></BSTableHeadCell>
                <BSTableHeadCell Color="Color.Dark" scope="col"><input type="email" class="form-control" id="exampleFormControlInput3" placeholder="Inserte Valor Filtro"></BSTableHeadCell>
                <BSTableHeadCell Color="Color.Dark" scope="col"><input type="email" class="form-control" id="exampleFormControlInput4" placeholder="Inserte Valor Filtro"></BSTableHeadCell>                
            </BSTableRow>
        </BSTableHead>
        <BSTableBody>
            @foreach (var cliente in clientes)
            {
                var editIconID = "editIcon" + @cliente.Id;
                var deleteIconID = "deleteIcon" + @cliente.Id;
                <BSTableRow>
                    <BSTableCell>
                        <BSContainer>
                            <BSRow>
                                <BSCol XS="6">
                                    <a style="cursor: pointer;"><i id="@editIconID" class="oi oi-pencil" @onclick="@(() => ClienteToEdit(cliente))"></i></a>
                                    <BSTooltip Target="@editIconID" Placement="Placement.Top">Editar</BSTooltip>
                                </BSCol>
                                <BSCol XS="6">
                                    <a style="cursor: pointer;"><i id="@deleteIconID" class="oi oi-trash" @onclick="@(() => ClienteToRemove(cliente.Id, cliente.Nombre))"></i></a>
                                    <BSTooltip Target="@deleteIconID" Placement="Placement.Top">Eliminar</BSTooltip>
                                </BSCol>
                            </BSRow>
                        </BSContainer>
                    </BSTableCell>
                    <BSTableCell>@cliente.Id</BSTableCell>
                    <BSTableCell>@(cliente.Nombre.Length > maxCellCharLength ? TruncateLongString(cliente.Nombre, maxCellCharLength) + "..." : TruncateLongString(cliente.Nombre, maxCellCharLength))</BSTableCell>
                    <BSTableCell>@(cliente.Descripcion.Length > maxCellCharLength ?  TruncateLongString(cliente.Descripcion, maxCellCharLength) + "..." : TruncateLongString(cliente.Descripcion, maxCellCharLength) )</BSTableCell>
                    <BSTableCell>@cliente.Email</BSTableCell>
                </BSTableRow>
            }
        </BSTableBody>
    </BSTable>
    <BSContainer>
        <BSRow>
            <BSCol XS="auto">
                <BSLabel For="itemsPerPageText"><span class="align-middle">Resultados por p&#225;gina</span></BSLabel>
            </BSCol>
            <BSCol XS="auto">
                <Dropdown TItem="string" OnSelected="@OnSelected">
                    <InitialTip>@ItemsPerPage</InitialTip>
                    <ChildContent>
                        @foreach (var item in ItemsPerPageList)
                        {
                            <DropdownListItem Item="@item">@item</DropdownListItem>
                        }
                    </ChildContent>
                </Dropdown>
            </BSCol>
        </BSRow>
    </BSContainer>


    <Paginacion PaginasTotales="PaginasTotales" PaginaActual="PaginaActual" PaginaSeleccionada="PaginaSeleccionada"></Paginacion>

}
@code {
    // Modals
    BSModal ClienteModal;
    BSModal ConfirmacionEliminarClienteModal;
    string modalTitle;
    string modalButtonText;

    public List<Cliente> clientes { get; set; }
    private Cliente clienteModel = new Cliente();
    private PagingMetadata pagingMetadata = new PagingMetadata();
    string errorString;
    string clienteNameToDelete;
    int clienteIdToDelete;
    int maxCellCharLength = 25;
    private string OrderByField = "Name";
    private string OrderType = "asc";
    private string FilterText;

    //Paging
    public int PaginaActual { get; set; } = 1;
    public int PaginasTotales { get; set; }
    string ItemsPerPage = "5";
    List<string> ItemsPerPageList = new List<string> { "5", "10", "20", "25", "50" };

    protected override async Task OnInitializedAsync()
    {
        await GetAllClientesPaged(PaginaActual, OrderByField, OrderType);
        PaginasTotales = pagingMetadata.TotalPages;
    }

    private async Task GetAllClientesPaged(int page, string orderby, string ordertype)
    {
        pagingMetadata.CurrentPage = page;
        var request = new HttpRequestMessage(HttpMethod.Get,
            "clientes?pageNumber=" + page.ToString() + "&pageSize=" + ItemsPerPage + "&orderby=" + orderby + "&ordertype=" + ordertype);
        var client = _clientFactory.CreateClient("fortunaapi");
        Task<HttpResponseMessage> response = client.SendAsync(request);

        if (response.Result.IsSuccessStatusCode)
        {
            clientes = JsonSerializer.Deserialize<List<Cliente>>(await response.Result.Content.ReadAsStringAsync());
            var entries = response.Result.Headers.FirstOrDefault(q => q.Key == "X-Pagination").Value.FirstOrDefault();
            pagingMetadata = JsonSerializer.Deserialize<PagingMetadata>(entries.ToString());
            PaginasTotales = pagingMetadata.TotalPages;
        }
        else
        {
            toastService.ShowError("Hubo un error obteniendo los clientes", "Error");
            toastService.ShowError("Hubo un error obteniendo los clientes", "Error");
            errorString = $"Hubo un error obteniendo los clientes: {response.Result.ReasonPhrase}";
        }

    }

    private void ClienteToRemove(int Id, string Nombre)
    {
        clienteIdToDelete = Id;
        clienteNameToDelete = Nombre;
        modalTitle = "Eliminar Cliente";
        modalButtonText = "Ok";
        ConfirmacionEliminarClienteModal.Show();
    }

    private async Task RemoveCliente(int clienteId)
    {
        var client = _clientFactory.CreateClient("fortunaapi");
        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Delete,
            RequestUri = new Uri(client.BaseAddress + "clientes/" + clienteId.ToString())
        };
        Task<HttpResponseMessage> response = client.SendAsync(request);

        if (response.Result.IsSuccessStatusCode)
        {
            await GetAllClientesPaged(PaginaActual, OrderByField, OrderType);
            ConfirmacionEliminarClienteModal.Hide();
            toastService.ShowSuccess("El cliente se ha eliminado con éxito", "Eliminación cliente");
        }
        else
        {
            toastService.ShowError("Hubo un error eliminando al cliente", "Error");
            errorString = $"Hubo un error eliminando al cliente: {response.Result.ReasonPhrase}";
            ConfirmacionEliminarClienteModal.Hide();
            return;
        }
    }

    private async void OnSelected(string selection)
    {
        ItemsPerPage = selection;
        PaginaActual = 1;
        await GetAllClientesPaged(PaginaActual, OrderByField, OrderType);
    }

    private async void Sort(string field)
    {
        OrderByField = field != null ? field : "Nombre";
        OrderType = (OrderType == "asc" ? "desc" : "asc");

        await GetAllClientesPaged(PaginaActual, OrderByField, OrderType);
    }

    private async Task InsertCliente()
    {
        var client = _clientFactory.CreateClient("fortunaapi");
        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri(client.BaseAddress + "clientes"),
            Content = new StringContent(JsonSerializer.Serialize(clienteModel), Encoding.UTF8, "application/json")
        };
        Task<HttpResponseMessage> response = client.SendAsync(request);

        ClienteModal.Hide();

        if (response.Result.IsSuccessStatusCode)
        {
            await GetAllClientesPaged(PaginaActual, OrderByField, OrderType);
            toastService.ShowSuccess("El cliente se ha creado con éxito", "Nuevo cliente");
        }
        else
        {
            toastService.ShowError("Hubo un error durante la creación del cliente", "Error");
            errorString = $"Hubo un error insertando el nuevo cliente: {response.Result.ReasonPhrase}";
            return;
        }
    }

    private async void SubmitCliente()
    {
        if (clienteModel.Id == 0)
        {
            await InsertCliente();
        }
        else
        {
            await EditCliente();
        }
    }

    private async void PaginaSeleccionada(int pagina)
    {
        PaginaActual = pagina;
        await GetAllClientesPaged(pagina, OrderByField, OrderType);
    }

    private void NuevoClienteForm()
    {
        modalButtonText = "Crear";
        modalTitle = "Nuevo Cliente";
        clienteModel = new Cliente();
        ClienteModal.Show();
    }

    private void ClienteToEdit(Cliente cliente)
    {
        clienteModel = cliente;
        modalButtonText = "Guardar";
        modalTitle = "Editar Cliente";
        ClienteModal.Show();
    }

    private async Task EditCliente()
    {
        var client = _clientFactory.CreateClient("fortunaapi");
        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Put,
            RequestUri = new Uri(client.BaseAddress + "clientes"),
            Content = new StringContent(JsonSerializer.Serialize(clienteModel), Encoding.UTF8, "application/json")
        };
        Task<HttpResponseMessage> response = client.SendAsync(request);

        ClienteModal.Hide();

        if (response.Result.IsSuccessStatusCode)
        {
            await GetAllClientesPaged(PaginaActual, OrderByField, OrderType);
            toastService.ShowSuccess("El cliente se ha actualizado con éxito", "Actualización cliente");
        }
        else
        {
            toastService.ShowError("Hubo un error durante la actualización del cliente", "Error");
            errorString = $"Hubo un error editando el nuevo cliente: {response.Result.ReasonPhrase}";
            return;
        }
    }

    public string TruncateLongString(string str, int maxLength)
    {
        if (string.IsNullOrEmpty(str))
            return str;
        return str.Substring(0, Math.Min(str.Length, maxLength));
    }
}
