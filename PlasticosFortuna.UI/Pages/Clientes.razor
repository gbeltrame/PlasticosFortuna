@page "/clientes"

@using PlasticosFortuna.Shared;
@using BlazorStrap.Util;
@using BlazorStrap.Extensions;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Text;
@inject IHttpClientFactory _clientFactory;


<h3>Clientes</h3>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
}
else if (clientes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <BSButton Color="Color.Primary" @onclick="@(() => NuevoClienteModal.Show())">Launch demo modal</BSButton>
    <p />
    <BSModal @ref="NuevoClienteModal">
        <EditForm Model="@newCliente" OnValidSubmit="@InsertCliente">
            <BSModalHeader OnClick="@(() => NuevoClienteModal.Hide())">Nuevo Cliente</BSModalHeader>
            <BSModalBody>
                <p>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <BSFormGroup>
                        <BSLabel For="nombre">Nombre</BSLabel>
                        <BSInput Id="nombre" @bind-Value="@newCliente.Nombre" />
                    </BSFormGroup>
                    <BSFormGroup>
                        <BSLabel For="descripcion">Descripci&#243;n</BSLabel>
                        <BSBasicInput Id="descripcion" InputType="InputType.TextArea" @bind-Value="@newCliente.Descripcion" />
                    </BSFormGroup>
                    <BSFormGroup>
                        <BSLabel For="email">Direcci&#243;n de correo electronico</BSLabel>
                        <BSInput Id="email" InputType="InputType.Email" @bind-Value="@newCliente.Email" />
                    </BSFormGroup>
                </p>
            </BSModalBody>
            <BSModalFooter>
                <BSButton Color="Color.Secondary" @onclick="@(() => NuevoClienteModal.Hide())">Cerrar</BSButton>
                <BSButton ButtonType="ButtonType.Submit" Color="Color.Primary" @onclick="@(() => NuevoClienteModal.Hide())">Crear</BSButton>
            </BSModalFooter>
        </EditForm>
    </BSModal>


    <p> Resultados @(pagingMetadata.PageSize * (PaginaActual - 1)) - @(pagingMetadata.PageSize * PaginaActual) de @(pagingMetadata.TotalCount)</p>
    <BSTable IsResponsive="true" IsStriped="true">
        <BSTableHead>
            <BSTableRow>
                <BSTableHeadCell Color="Color.Dark" scope="col"><a style="color:white" href="javascript:void(0)" @onclick="@(Sort)" @onclick:preventDefault>Nro. Cliente</a></BSTableHeadCell>
                <BSTableHeadCell Color="Color.Dark" scope="col"><a style="color:white" href="javascript:void(0)" @onclick="@(Sort)" @onclick:preventDefault>Nombre</a></BSTableHeadCell>
                <BSTableHeadCell Color="Color.Dark" scope="col"><a style="color:white" href="javascript:void(0)" @onclick="@(Sort)" @onclick:preventDefault>Descripcion</a></BSTableHeadCell>
                <BSTableHeadCell Color="Color.Dark" scope="col"><a style="color:white" href="javascript:void(0)" @onclick="@(Sort)" @onclick:preventDefault>Email</a></BSTableHeadCell>
            </BSTableRow>
        </BSTableHead>
        <BSTableBody>
            @foreach (var cliente in clientes)
            {
                <BSTableRow>
                    <BSTableCell>@cliente.Id</BSTableCell>
                    <BSTableCell>@cliente.Nombre</BSTableCell>
                    <BSTableCell>@cliente.Descripcion</BSTableCell>
                    <BSTableCell>@cliente.Email</BSTableCell>
                </BSTableRow>
            }
        </BSTableBody>
    </BSTable>
    <BSContainer>
        <BSRow>
            <BSCol XS="auto">
                <BSLabel For="itemsPerPageText">Resultados por pagina</BSLabel>
            </BSCol>
            <BSCol XS="auto">
                <Dropdown TItem="string" OnSelected="@OnSelected">
                    <InitialTip>@ItemsPerPage</InitialTip>
                    <ChildContent>
                        @foreach (var item in ItemsPerPageList)
                        {
                            <DropdownListItem Item="@item">@item</DropdownListItem>
                        }
                    </ChildContent>
                </Dropdown>
            </BSCol>
        </BSRow>
    </BSContainer>


    <Paginacion PaginasTotales="PaginasTotales" PaginaActual="PaginaActual" PaginaSeleccionada="PaginaSeleccionada"></Paginacion>

}
@code {
    BSModal NuevoClienteModal;
    public List<Cliente> clientes { get; set; }
    private Cliente newCliente = new Cliente();
    private PagingMetadata pagingMetadata = new PagingMetadata();
    string ItemsPerPage = "5";
    List<string> ItemsPerPageList = new List<string> { "5", "10", "20", "25", "50" };
    string errorString;
    //Paging
    public int PaginaActual { get; set; } = 1;
    public int PaginasTotales { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetAllClientesPaged(PaginaActual);
        PaginasTotales = pagingMetadata.TotalPages;
    }

    private async Task GetAllClientesPaged(int page)
    {
        pagingMetadata.CurrentPage = page;
        var request = new HttpRequestMessage(HttpMethod.Get,
            "clientes?pageNumber=" + page.ToString() + "&pageSize=" + ItemsPerPage);
        var client = _clientFactory.CreateClient("fortunaapi");
        Task<HttpResponseMessage> response = client.SendAsync(request);

        if (response.Result.IsSuccessStatusCode)
        {
            clientes = JsonSerializer.Deserialize<List<Cliente>>(await response.Result.Content.ReadAsStringAsync());
            var entries = response.Result.Headers.FirstOrDefault(q => q.Key == "X-Pagination").Value.FirstOrDefault();
            pagingMetadata = JsonSerializer.Deserialize<PagingMetadata>(entries.ToString());
        }
        else
        {
            errorString = $"Hubo un error obteniendo los clientes: {response.Result.ReasonPhrase}";
        }

    }

    private async void OnSelected(string selection)
    {
        ItemsPerPage = selection;
        await GetAllClientesPaged(PaginaActual);
    }


    private void Sort()
    {
        clientes.ToList().Sort();
    }

    private async Task InsertCliente()
    {
        var client = _clientFactory.CreateClient("fortunaapi");
        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri(client.BaseAddress + "clientes"),
            Content = new StringContent(JsonSerializer.Serialize(newCliente), Encoding.UTF8, "application/json")
        };
        Task<HttpResponseMessage> response = client.SendAsync(request);

        if (response.Result.IsSuccessStatusCode)
        {
            await GetAllClientesPaged(PaginaActual);
        }
        else
        {
            errorString = $"Hubo un error insertando el nuevo cliente: {response.Result.ReasonPhrase}";
            return;
        }
    }

    private async void PaginaSeleccionada(int pagina)
    {
        PaginaActual = pagina;
        await GetAllClientesPaged(pagina);
    }

}
